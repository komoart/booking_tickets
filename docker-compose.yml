version: '3.8'

services:
  rabbitmq:
    build:
      context: .
      dockerfile: rabbitmq/Dockerfile
    container_name: rabbitmq
    expose:
      - "5672"
      - "15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    env_file:
      - .env
    networks:
      - project-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1

  nginx:
    container_name: nginx
    image: nginx:1.23
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
    ports:
      - "8080:8080"
      - "8084:8084"
    restart: always
    networks:
      - project-network
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx

  postgres:
    container_name: postgres
    image: postgres:15.2-alpine3.17
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - project-network
    healthcheck:
      test: [ "CMD-SHELL", "su postgres", "&&", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    container_name: redis
    image: redis:7.0.4-alpine
    restart: always
    networks:
      - project-network
    expose:
      - 6379
    volumes:
      - cache:/data
    healthcheck:
      test: redis-cli ping

  auth_api:
    container_name: auth_api
    build:
      context: services/auth
      dockerfile: Dockerfile
    restart: always
    networks:
      - project-network
    expose:
      - 8081
    env_file:
      - .env

  ugc_api:
    container_name: ugc_api
    build:
      context: services/ugc
      dockerfile: Dockerfile
    restart: always
    networks:
      - project-network
    expose:
      - 8082
    env_file:
      - .env

  movie_api:
    container_name: movie_api
    build:
      context: services/movies
      dockerfile: Dockerfile
    restart: always
    networks:
      - project-network
    expose:
      - 8083
    env_file:
      - .env

  booking_api:
    container_name: booking_api
    build:
      context: services/booking/api
      dockerfile: Dockerfile
    restart: always
    networks:
      - project-network
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx

  watcher:
    container_name: watcher
    build:
      context: services/booking/watcher
      dockerfile: Dockerfile
    restart: always
    networks:
      - project-network
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx


volumes:
  postgres_data:
  cache:

networks:
  project-network:
    external: true
